git clone https://github.com/smichelotti/ng-bootstrap-course
npm install -g @angular/cli
ng new workout-tracker --routing
cd workout-tracker
code .
ng g c Home (ng generate component Home)
ng g c Workouts
ng g c EntryEditor
ng g c NavMenu

mkdir src/css
create file src/css/bootstrap.superhero.min.css
https://bootswatch.com - many great bootstrap themes
select all from https://bootswatch.com/4/superhero/bootstrap.min.css
paste to src/css/bootstrap.superhero.min.css

open angular.json:
	"styles": [
	  "src/styles.css",
	  "src/css/bootstrap.superhero.min.css"
	],
	
open src/styles.css:
body {
    padding-top: 92px;
    height: 100%;
}

.body-content {
    padding-left: 15px;
    padding-right: 15px;
}

.applicationHost {
    min-height: 100%;
    height: auto !important;
    height: 100%;
    /* Negative indent footer by its height */
    margin: 0 auto -60px;
    /* Pad bottom by footer height */
    padding: 0 0 90px;
}

open index.html:
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Workout Tracker</title>
  <base href="/">

  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
</head>
<body>
  <div class="container body-content applicationHost">
    <app-root>
      <nav class="navbar navbar-toggleable-md fixed-top navbar-inverse bg-primary">
        <div class="container">
          <a class="navbar-brand" href="">Workout Tracker</a>
        </div>
      </nav>
      <h2>Loading Workout Tracker...</h2>
    </app-root>
  </div>
</body>
</html>	

app.component.html:
<div>
	<app-nav-menu></app-nav-menu>
	<router-outlet></router-outlet>
</div>

nav-menu.component.html:
<div class="navbar navbar-expand-lg fixed-top navbar-dark bg-primary">
  <a class="navbar-brand" [routerLink]="['/']">Workout Tracker</a>

  <div class="collapse navbar-collapse xnavbar-nav xnav">
    <ul class="navbar-nav mr-auto">
      <li class="nav-item">
        <a class="nav-item nav-link" [routerLink]="['/']" [routerLinkActive]="['link-active']">Home</a>
      </li>

      <li class="nav-item">
        <a class="nav-item nav-link" [routerLink]="['/workouts']" [routerLinkActive]="['link-active']">Workouts</a>
      </li>
    </ul>
  </div>
</div>

app-routing.modules.ts generated:
import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';

const routes: Routes = [];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }

new:
import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';

const routes: Routes = [
	{ path: '', component: HomeComponent },
	{ path: 'workouts', component: WorkoutsComponent },
	{ path: 'workouts/:id', component: EntryEditorComponent }
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }

place the mouse pointer on HomeComponent and press Ctrl . to import 
import { HomeComponent } from './home/home.component'; in VS Code.
do the same for WorkoutsComponent and EntryEditorComponent.

npm install -g json-server
copy the data folder from ng-bootstrap-course\data to workout-tracker.
cd data
json-server db.json
c:\dev\workout-tracker\data (master -> origin)
Î» json-server db.json

  \{^_^}/ hi!

  Loading db.json
  Done

  Resources
  http://localhost:3000/performanceTargets
  http://localhost:3000/workouts
  http://localhost:3000/locations

  Home
  http://localhost:3000

  Type s + enter at any time to create a snapshot of the database

install Postman
GET http://localhost:3000/workouts
[
    {
        "id": 1,
        "date": "2018-8-4",
        "type": "bike",
        "distance": "101"
    },
    {
        "id": 2,
        "date": "2018-8-5",
        "type": "row",
        "distance": 200
    },

GET http://localhost:3000/workouts/2
{
    "id": 2,
    "date": "2018-8-5",
    "type": "row",
    "distance": 200
}

cd src\app
mkdir services
cd services
ng generate service WorkoutsApi

workouts-Api.service.ts:
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Injectable({
  providedIn: 'root'
})
export class WorkoutsApiService {
  private baseUrl = 'http://localhost:3000';

  constructor(private http: HttpClient) { }

  getWorkouts() {
    return this.http.get<any[]>(`${this.baseUrl}/workouts`);
  }

  getWorkoutsPaged(currPage, pageSize) {
    return this.http.get<any[]>(`${this.baseUrl}/workouts?_page=${currPage}&_limit=${pageSize}`);
  }

  getWorkout(id) {
    return this.http.get<any>(`${this.baseUrl}/workouts/${id}`);
  }

  addWorkout(workout: any) {
    return this.http.post(`${this.baseUrl}/workouts`, workout);
  }

  updateWorkout(workout: any) {
    return this.http.put(`${this.baseUrl}/workouts/${workout.id}`, workout);
  }

  saveWorkout(workout: any) {
    if (workout.id) {
      return this.updateWorkout(workout);
    } else {
      return this.addWorkout(workout);
    }
  }

  deleteWorkout(id) {
    return this.http.delete(`${this.baseUrl}/workouts/${id}`);
  }

  getLocations() {
    return this.http.get<any[]>(`${this.baseUrl}/locations`);
  }

  searchLocations(searchTerm) {
    return this.http.get<any[]>(`${this.baseUrl}/locations?q=${searchTerm}`);
  }

  getPerfTargets() {
    return this.http.get(`${this.baseUrl}/performanceTargets`);
  }
  
  savePerfTargets(perfTargets: any){
    return this.http.put(`${this.baseUrl}/performanceTargets`, perfTargets);
  }
  
}

app.module.ts:
  providers: [
    WorkoutsApiService
  ],
  
cd C:\dev\workout-tracker
npm install lodash ngx-loading --save

app.module.ts:
// Third paty imports
import { NgxLoadingModule } from 'ngx-loading';


imports: [
    ...
    NgxLoadingModule.forRoot({})
],

home.component.html:
<div>
    <div class="jumbotron">
        <h1 class=""display-3">Workout Tracker</h1>
        <hr class="my-4" />
        <p>
            Welcome to Workout Tracker!
        </p>
    </div>
</div>

workouts.component.html:
<div>
  <!-- Shows a spinner when a HTTP call is being made -->
  <!-- Will show the spinner when the call is in progress and will hide when the call is finished -->
  <ngx-loading [show]="loading" [config]="{ backdropBorderRadius: '14px' }"></ngx-loading>

  <div class="card">
    <div class="card-header">
      <h4 class="card-title">Workouts</h4>
    </div>
    <div class="card-body">
      <button class="btn btn-sm btn-primary>Set Performance Targets</button>

        <!-- TODO: Progress bar here -->
    </div>
  </div>

  <div class="card">
    <h3 class="card-header">
      Workout Entries
      <a [routerLink]="['/workouts', 'new']" class="btn btn-sm btn-primary float-right">Add New Entry</a>
    </h3>
    <div class="card-body">
    
      <table class="table table-striped">
        <thead>
          <th>Date</th>
          <th>Type</th>
          <th>Distance</th>
          <th></th>
        </thead>
        <tbody>
          <tr *ngFor="let entry of workouts">
            <td>{{entry.date}}</td>
            <td>{{entry.type}}</td>
            <td>{{entry.distance}}</td>
            <td>
              <a [routerLink]="['/workouts', entry.id]" class="btn btn-info btn-sm mr-2">Edit</a>
              <button class="btn btn-danger btn-sm" (click)="deleteWorkout(entry.id, deleteModal)">Delete</button>
            </td>

          </tr>
        </tbody>
      </table>

    </div>
  </div>

</div>

workouts.component.ts:
import { Component, OnInit, ViewEncapsulation } from '@angular/core';
import { WorkoutsApiService } from '../services/workouts-api.service';
import * as _ from 'lodash';

@Component({
  selector: 'app-workouts',
  templateUrl: './workouts.component.html',
  styleUrls: ['./workouts.component.css']
})
export class WorkoutsComponent implements OnInit {
  public workouts = [];
  public loading = false;

  constructor(private api: WorkoutsApiService) { }

  ngOnInit() {
    this.loading = true;
    this.api.getWorkouts().subscribe(data => {
        this.workouts = data;
        this.loading = false;
    });
  }

  deleteWorkout(id, deleteModal) {
    // Removes the { id: id } object  from the this.workouts array.
    // See https://lodash.com/
    this.api.deleteWorkout(id).subscribe(data => _.remove(this.workouts, { id: id }));
  }

}

entry-editor.component.html:
<div class="container">
  <ngx-loading [show]="loading" [config]="{ backdropBorderRadius: '14px' }"></ngx-loading>

  <div class="card">
    <h3 class="card-header">Entry</h3>
    <div class="card-body">
      <form>
        <div class="form-group row">
          <label class="col-form-label col-sm-2">Type:</label>
          <div class="col-sm-6">
            <select class="form-control" [(ngModel)]="workout.type">
                <option value="">(Select)</option>
                <option value="bike">Bike</option>
                <option value="run">Run</option>
                <option value="row">Row</option>
            </select>
        </div>

        <div class="form-group row">
          <label class="col-form-label col-sm-2">Date:</label>
          <div class="col-sm-3">
            <input type="text" class="form-control" name="wdate" [(ngModel)]="workout.date" />
          </div>
        </div>
        
        <div class="form-group row">
          <label class="col-form-label col-sm-2">Distance:</label>
          <div class="col-sm-3">
            <input type="text" class="form-control" name="wdistance" [(ngModel)]="workout.distance" />
          </div>
        </div>
        
        <div class="form-group row">
          <div class="col-sm-4 mt-sm-3">
            <button class="btn btn-primary mr-sm-2" (click)="save()">Save</button>
            <a class="btn btn-secondary" [routerLink]="['/workouts']">Cancel</a>
          </div>
        </div>
      </form>
    </div>
  </div>
</div>

entry-editor.component.ts:
import { Component, OnInit, ViewEncapsulation } from '@angular/core';
import { WorkoutsApiService } from '../services/workouts-api.service';
import { ActivatedRoute, Router } from '@angular/router';

@Component({
  selector: 'app-entry-editor',
  templateUrl: './entry-editor.component.html',
  styleUrls: ['./entry-editor.component.css']
})
export class EntryEditorComponent implements OnInit {
  public workout: any = {};
  public loading = false;

  constructor(
    private router: ActivatedRoute,
    private nav: Router,
    private api: WorkoutsApiService) { }

  ngOnInit() {
    this.router.params.subscribe(params => {
      if (params.id !== 'new') {
        this.loading = true;
        this.api.getWorkout(params.id).subscribe(data => {
          this.workout = data;
          this.loading = false;
        });
      }
    });
  }

  save() {
    this.loading = true;
    this.api.saveWorkout(this.workout).subscribe(data => {
      this.loading = false;
      this.nav.navigate(['/workouts']);
    });
  }
}

app.module.ts:
import { FormsModule } from '@angular/forms';

imports: [
    ...
    FormsModule
],

  

